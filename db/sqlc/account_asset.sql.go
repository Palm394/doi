// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_asset.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAccountAsset = `-- name: CreateAccountAsset :one
INSERT INTO account_asset (account_id, asset_id, quantity, average_cost) VALUES ($1, $2, $3, $4) RETURNING account_id, asset_id, quantity, average_cost, created_at, updated_at
`

type CreateAccountAssetParams struct {
	AccountID   int32     `json:"account_id"`
	AssetID     uuid.UUID `json:"asset_id"`
	Quantity    string    `json:"quantity"`
	AverageCost string    `json:"average_cost"`
}

func (q *Queries) CreateAccountAsset(ctx context.Context, arg CreateAccountAssetParams) (AccountAsset, error) {
	row := q.db.QueryRowContext(ctx, createAccountAsset,
		arg.AccountID,
		arg.AssetID,
		arg.Quantity,
		arg.AverageCost,
	)
	var i AccountAsset
	err := row.Scan(
		&i.AccountID,
		&i.AssetID,
		&i.Quantity,
		&i.AverageCost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccountAsset = `-- name: DeleteAccountAsset :one
DELETE FROM account_asset WHERE account_id = $1 AND asset_id = $2 RETURNING account_id, asset_id, quantity, average_cost, created_at, updated_at
`

type DeleteAccountAssetParams struct {
	AccountID int32     `json:"account_id"`
	AssetID   uuid.UUID `json:"asset_id"`
}

func (q *Queries) DeleteAccountAsset(ctx context.Context, arg DeleteAccountAssetParams) (AccountAsset, error) {
	row := q.db.QueryRowContext(ctx, deleteAccountAsset, arg.AccountID, arg.AssetID)
	var i AccountAsset
	err := row.Scan(
		&i.AccountID,
		&i.AssetID,
		&i.Quantity,
		&i.AverageCost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountAssets = `-- name: GetAccountAssets :one
SELECT account_id, asset_id, quantity, average_cost, created_at, updated_at FROM account_asset WHERE account_id = $1 AND asset_id = $2
`

type GetAccountAssetsParams struct {
	AccountID int32     `json:"account_id"`
	AssetID   uuid.UUID `json:"asset_id"`
}

func (q *Queries) GetAccountAssets(ctx context.Context, arg GetAccountAssetsParams) (AccountAsset, error) {
	row := q.db.QueryRowContext(ctx, getAccountAssets, arg.AccountID, arg.AssetID)
	var i AccountAsset
	err := row.Scan(
		&i.AccountID,
		&i.AssetID,
		&i.Quantity,
		&i.AverageCost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllCashAccount = `-- name: GetAllCashAccount :many
SELECT accounts.name, account_asset.quantity, assets.current_value, assets.current_value_currency FROM
accounts LEFT JOIN
account_asset LEFT JOIN assets ON account_asset.asset_id = assets.id AND assets.type = 'CASH'
ON accounts.id = account_asset.account_id
`

type GetAllCashAccountRow struct {
	Name                 string         `json:"name"`
	Quantity             string         `json:"quantity"`
	CurrentValue         sql.NullString `json:"current_value"`
	CurrentValueCurrency sql.NullString `json:"current_value_currency"`
}

func (q *Queries) GetAllCashAccount(ctx context.Context) ([]GetAllCashAccountRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCashAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCashAccountRow
	for rows.Next() {
		var i GetAllCashAccountRow
		if err := rows.Scan(
			&i.Name,
			&i.Quantity,
			&i.CurrentValue,
			&i.CurrentValueCurrency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountAsset = `-- name: UpdateAccountAsset :one
UPDATE account_asset SET quantity = $3, average_cost = $4 WHERE account_id = $1 AND asset_id = $2 RETURNING account_id, asset_id, quantity, average_cost, created_at, updated_at
`

type UpdateAccountAssetParams struct {
	AccountID   int32     `json:"account_id"`
	AssetID     uuid.UUID `json:"asset_id"`
	Quantity    string    `json:"quantity"`
	AverageCost string    `json:"average_cost"`
}

func (q *Queries) UpdateAccountAsset(ctx context.Context, arg UpdateAccountAssetParams) (AccountAsset, error) {
	row := q.db.QueryRowContext(ctx, updateAccountAsset,
		arg.AccountID,
		arg.AssetID,
		arg.Quantity,
		arg.AverageCost,
	)
	var i AccountAsset
	err := row.Scan(
		&i.AccountID,
		&i.AssetID,
		&i.Quantity,
		&i.AverageCost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
