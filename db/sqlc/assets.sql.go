// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: assets.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO assets (name, type) VALUES ($1, $2) RETURNING id, name, type, current_value, current_value_currency, created_at, updated_at
`

type CreateAssetParams struct {
	Name string         `json:"name"`
	Type sql.NullString `json:"type"`
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, createAsset, arg.Name, arg.Type)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CurrentValue,
		&i.CurrentValueCurrency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssetByID = `-- name: GetAssetByID :one
SELECT id, name, type, current_value, current_value_currency, created_at, updated_at FROM assets WHERE id = $1
`

func (q *Queries) GetAssetByID(ctx context.Context, id uuid.UUID) (Asset, error) {
	row := q.db.QueryRowContext(ctx, getAssetByID, id)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CurrentValue,
		&i.CurrentValueCurrency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssetByName = `-- name: GetAssetByName :one
SELECT id, name, type, current_value, current_value_currency, created_at, updated_at FROM assets WHERE name = $1
`

func (q *Queries) GetAssetByName(ctx context.Context, name string) (Asset, error) {
	row := q.db.QueryRowContext(ctx, getAssetByName, name)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CurrentValue,
		&i.CurrentValueCurrency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssets = `-- name: GetAssets :many
SELECT id, name, type, current_value, current_value_currency, created_at, updated_at FROM assets
`

func (q *Queries) GetAssets(ctx context.Context) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, getAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CurrentValue,
			&i.CurrentValueCurrency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
