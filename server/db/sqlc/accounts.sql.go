// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (name, region) VALUES ($1, $2) 
RETURNING id, name, region
`

type CreateAccountParams struct {
	Name   string `json:"name"`
	Region string `json:"region"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Name, arg.Region)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.Region)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM accounts WHERE id = $1 
RETURNING id, name, region
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.Region)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, region FROM accounts WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Name, &i.Region)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, name, region FROM accounts
`

func (q *Queries) GetAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Name, &i.Region); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
